// 1 
// Memory Game in C++

//#include <iostream>
//#include <vector>
//#include <algorithm>
//#include <ctime>
//#include <cstdlib>
//#include <thread>
//#include <chrono>
//
//using namespace std;
//
//class Card {
//public:
//    char symbol;
//    bool isRevealed;
//    bool isMatched;
//
//    Card(char s) : symbol(s), isRevealed(false), isMatched(false) {}
//};
//
//class MemoryGame {
//private:
//    vector<vector<Card>> board;
//    int size;
//    int matchedPairs;
//
//public:
//
//    // Setters
//	void setSize(int boardSize) {
//		size = boardSize;
//	}
//
//	// Getters
//	int getSize() const
//	{
//		return size;
//	}
//
//    MemoryGame(int boardSize) : size(boardSize), matchedPairs(0) {
//        generateBoard();
//    }
//
//    void generateBoard() {
//        vector<char> symbols;
//        for (char c = 'A'; c < 'A' + (size * size) / 2; ++c) {
//            symbols.push_back(c);
//            symbols.push_back(c);
//        }
//        random_shuffle(symbols.begin(), symbols.end());
//
//        int index = 0;
//        board.resize(size, vector<Card>(size, Card(' ')));
//        for (int i = 0; i < size; ++i)
//            for (int j = 0; j < size; ++j)
//                board[i][j] = Card(symbols[index++]);
//                
//    }
//
//    void printBoard(bool fullBoard = false) {
//        cout << "   ";
//        for (int j = 0; j < size; j++)
//            cout << j+1 << " ";
//        cout << "\n";
//
//		if (fullBoard) {
//            for (int i = 0; i < size; ++i) {
//                cout << i+1 << "  ";
//                for (int j = 0; j < size; ++j) {
//                	cout << "\033[1;32m" << board[i][j].symbol << "\033[0m ";
//                }
//                cout << "\n";
//            }
//		}
//
//		if (fullBoard) {
//			cout << "\n";
//			return;
//		}
//
//        for (int i = 0; i < size; ++i) {
//            cout << i+1 << "  ";
//            for (int j = 0; j < size; ++j) {
//                if (board[i][j].isRevealed || board[i][j].isMatched)
//                    cout << "\033[1;32m" << board[i][j].symbol << "\033[0m ";
//                else
//                    cout << "* ";
//            }
//            cout << "\n";
//        }
//    }
//
//    bool isFinished() {
//        return matchedPairs == (size * size) / 2;
//    }
//
//    void play() {
//        while (!isFinished()) {
//            printBoard();
//            int x1, y1, x2, y2;
//
//            while (true)
//            {
//                cout << "–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–µ—Ä—à–æ—ó –∫–∞—Ä—Ç–∫–∏ (x y): ";
//                cin >> x1 >> y1;
//				if (cin.fail()) {
//					cout << "\033[031m –ü–æ–º–∏–ª–∫–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.\033[0m\n";
//					cin.clear();
//					cin.ignore(1000, '\n');
//				}
//				if (x1 < 1 || x1 > size || y1 < 1 || y1 > size) {
//					cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.\n";
//					continue;
//				}
//				x1--; y1--;
//				break;
//            }
//           
//
//            if (!isValid(x1, y1)) {
//                cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.\n";
//                continue;
//            }
//
//            board[x1][y1].isRevealed = true;
//            printBoard();
//
//            cout << "–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥—Ä—É–≥–æ—ó –∫–∞—Ä—Ç–∫–∏ (x y): ";
//            while (true)
//            {
//				cin >> x2 >> y2;
//				if (cin.fail()) {
//					cout << "\033[031m –ü–æ–º–∏–ª–∫–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.\033[0m\n";
//					cin.clear();
//					cin.ignore(1000, '\n');
//				}
//				if (x2-1 == x1 && y2-1 == y1) {
//					cout << "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Ç—É –∂ —Å–∞–º—É –∫–∞—Ä—Ç–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.\n";
//					continue;
//				}
//				if (x2 < 1 || x2 > size || y2 < 1 || y2 > size) {
//					cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.\n";
//					continue;
//				}
//				x2--; y2--;
//				break;
//            }
//            
//
//            if (!isValid(x2, y2) || (x1 == x2 && y1 == y2)) {
//                cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.\n";
//                board[x1][y1].isRevealed = false;
//                continue;
//            }
//
//            board[x2][y2].isRevealed = true;
//            printBoard();
//
//            if (board[x1][y1].symbol == board[x2][y2].symbol) {
//                cout << "–ü–∞—Ä–∞ –∑–Ω–∞–π–¥–µ–Ω–∞!\n";
//                board[x1][y1].isMatched = true;
//                board[x2][y2].isMatched = true;
//                matchedPairs++;
//            }
//            else {
//                cout << "–ù–µ –∑–±—ñ–≥–ª–æ—Å—è. –ó–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏...\n";
//                std::this_thread::sleep_for(std::chrono::seconds(2));
//                board[x1][y1].isRevealed = false;
//                board[x2][y2].isRevealed = false;
//            }
//
//            cout << "\n";
//        }
//
//        cout << "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–Ω–∞–π—à–ª–∏ –≤—Å—ñ –ø–∞—Ä–∏!\n";
//    }
//
//    bool isValid(int x, int y) {
//        return x >= 0 && x < size && y >= 0 && y < size && !board[x][y].isMatched && !board[x][y].isRevealed;
//    }
//
//
//};
//
//
//int main() {
//    system("chcp 65001 > nul");
//    srand(time(0));
//	cout << "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥—Ä–∏ 'Memory'!\n";
//	cout << "–ì—Ä–∞–π—Ç–µ, —â–æ–± –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–∞—Ä–∏ –∫–∞—Ä—Ç–æ–∫!\n";
//	cout << "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–æ—à–∫–∏ (2, 4, 6, 8): ";
//	int boardSize;
//    while (true)
//    {
//        cin >> boardSize;
//
//        if (cin.fail()) {
//            cout << "\033[031m –ü–æ–º–∏–ª–∫–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.\033[0m\n";
//            cin.clear(); 
//            cin.ignore(1000, '\n');
//        }
//
//
//        if (boardSize != 2 && boardSize != 4 && boardSize != 6 && boardSize != 8) {
//            cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–æ—à–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–æ–∑–º—ñ—Ä 4.\n";
//            continue;
//        }
//        
//        break;
//    }
//    MemoryGame game(boardSize);
//	cout << "–£ –≤–∞—Å " << (boardSize * boardSize) / 2 << " –ø–∞—Ä –∫–∞—Ä—Ç–æ–∫.\n";
//	cout << "–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è...\n";
//    std::this_thread::sleep_for(chrono::milliseconds(3000));
//    cout << "–£ –≤–∞—Å —î 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è: " << endl;
//    game.printBoard(true);
//    std::this_thread::sleep_for(chrono::milliseconds(1000));
//
//    game.play();
//    return 0;
//}


// 2
//

//#include <iostream>
//#include <vector>
//#include <string>
//#include <thread>
//#include <mutex>
//#include <condition_variable>
//#include <random>
//#include <ctime>
//#include <algorithm>
//
//using namespace std;
//


#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>
#include <random>
#include <map>
#include <ctime>
#include <unordered_map>
#include <algorithm>
#include <cctype>

using namespace std;

vector<string> ukrainian = {
    "—è–±–ª—É–∫–æ", "—Å–æ–±–∞–∫–∞", "–∫—ñ—Ç", "–±—É–¥–∏–Ω–æ–∫", "–º–∞—à–∏–Ω–∞", "–≤—ñ–∫–Ω–æ", "—Å—Ç—ñ–ª–µ—Ü—å", "—Å—Ç—ñ–ª", "—Ä—É—á–∫–∞", "–∫–Ω–∏–≥–∞",
    "–º–æ–ª–æ–∫–æ", "–≤–æ–¥–∞", "—Ö–ª—ñ–±", "–º'—è—Å–æ", "—Ä–∏–±–∞", "—á–∞–π", "–∫–∞–≤–∞", "—Ü—É–∫–æ—Ä", "—Å—ñ–ª—å", "–º–∞—Å–ª–æ",
    "–º–∞–º–∞", "—Ç–∞—Ç–æ", "–±—Ä–∞—Ç", "—Å–µ—Å—Ç—Ä–∞", "–¥–∏—Ç–∏–Ω–∞", "—à–∫–æ–ª–∞", "—É—á–µ–Ω—å", "–≤—á–∏—Ç–µ–ª—å", "–¥–æ—à–∫–∞", "–∑–æ—à–∏—Ç",
    "—Ä–æ–±–æ—Ç–∞", "–º–∞–≥–∞–∑–∏–Ω", "–º—ñ—Å—Ç–æ", "—Å–µ–ª–æ", "–¥–≤–µ—Ä—ñ", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫", "–¥–µ—Ä–µ–≤–æ", "–∫–≤—ñ—Ç–∫–∞", "—Å–æ–Ω—Ü–µ",
    "–º—ñ—Å—è—Ü—å", "–∑—ñ—Ä–∫–∞", "–Ω–µ–±–æ", "–¥–æ—â", "—Å–Ω—ñ–≥", "–≤—ñ—Ç–µ—Ä", "—Ç–µ–ø–ª–æ", "—Ö–æ–ª–æ–¥", "–≤–µ—Å–Ω–∞", "–ª—ñ—Ç–æ",
    "–æ—Å—ñ–Ω—å", "–∑–∏–º–∞", "–±—ñ–≥–∞—Ç–∏", "—Ö–æ–¥–∏—Ç–∏", "–ø–ª–∞–≤–∞—Ç–∏", "–ª–µ—Ç—ñ—Ç–∏", "—Å–∏–¥—ñ—Ç–∏", "—Å—Ç–æ—è—Ç–∏", "—á–∏—Ç–∞—Ç–∏", "–ø–∏—Å–∞—Ç–∏",
    "–≥–æ–≤–æ—Ä–∏—Ç–∏", "—Å–ª—É—Ö–∞—Ç–∏", "–±–∞—á–∏—Ç–∏", "–¥—É–º–∞—Ç–∏", "–ª—é–±–∏—Ç–∏", "–Ω–µ–Ω–∞–≤–∏–¥—ñ—Ç–∏", "—ó—Å—Ç–∏", "–ø–∏—Ç–∏", "—Å–ø–∞—Ç–∏", "–≤—Å—Ç–∞–≤–∞—Ç–∏",
    "–¥–æ–±—Ä–∏–π", "–ø–æ–≥–∞–Ω–∏–π", "–≤–µ–ª–∏–∫–∏–π", "–º–∞–ª–∏–π", "–Ω–æ–≤–∏–π", "—Å—Ç–∞—Ä–∏–π", "–≥–∞—Ä—è—á–∏–π", "—Ö–æ–ª–æ–¥–Ω–∏–π", "—à–≤–∏–¥–∫–∏–π", "–ø–æ–≤—ñ–ª—å–Ω–∏–π",
    "—Ä–æ–∑—É–º–Ω–∏–π", "–¥—É—Ä–Ω–∏–π", "–∫—Ä–∞—Å–∏–≤–∏–π", "–ø–æ—Ç–≤–æ—Ä–Ω–∏–π", "–≤–µ—Å–µ–ª–∏–π", "—Å—É–º–Ω–∏–π", "–ª–µ–≥–∫–∏–π", "–≤–∞–∂–∫–∏–π", "—á–∏—Å—Ç–∏–π", "–±—Ä—É–¥–Ω–∏–π",
    "—á–µ—Ä–≤–æ–Ω–∏–π", "–∂–æ–≤—Ç–∏–π", "–∑–µ–ª–µ–Ω–∏–π", "—Å–∏–Ω—ñ–π", "–±—ñ–ª–∏–π", "—á–æ—Ä–Ω–∏–π", "—Å—ñ—Ä–∏–π", "–∫–æ—Ä–∏—á–Ω–µ–≤–∏–π", "–æ—Ä–∞–Ω–∂–µ–≤–∏–π", "—Ä–æ–∂–µ–≤–∏–π",
    "–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–æ—Ç–∏—Ä–∏", "–ø‚Äô—è—Ç—å", "—à—ñ—Å—Ç—å", "—Å—ñ–º", "–≤—ñ—Å—ñ–º", "–¥–µ–≤‚Äô—è—Ç—å", "–¥–µ—Å—è—Ç—å",
    "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", "–ø‚Äô—è—Ç–Ω–∏—Ü—è", "—Å—É–±–æ—Ç–∞", "–Ω–µ–¥—ñ–ª—è", "–¥–µ–Ω—å", "–Ω—ñ—á", "—Ä–∞–Ω–æ–∫",
    "–≤–µ—á—ñ—Ä", "—Å—å–æ–≥–æ–¥–Ω—ñ", "–∑–∞–≤—Ç—Ä–∞", "–≤—á–æ—Ä–∞", "—á–∞—Å", "—Ä—ñ–∫", "–º—ñ—Å—è—Ü—å", "—Ç–∏–∂–¥–µ–Ω—å", "–≥–æ–¥–∏–Ω–∞", "—Ö–≤–∏–ª–∏–Ω–∞",
    "—Å–µ–∫—É–Ω–¥–∞", "–¥–æ—Ä–æ–≥–∞", "–≤—É–ª–∏—Ü—è", "–ø–ª–æ—â–∞", "–º–æ—Ä–µ", "—Ä—ñ—á–∫–∞", "–≥–æ—Ä–∞", "–ª—ñ—Å", "–ø–∞—Ä–∫", "–ø–ª—è–∂"
};

vector<string> french = {
    "pomme", "chien", "chat", "maison", "voiture", "fen√™tre", "chaise", "table", "stylo", "livre",
    "lait", "eau", "pain", "viande", "poisson", "th√©", "caf√©", "sucre", "sel", "beurre",
    "maman", "papa", "fr√®re", "s≈ìur", "enfant", "√©cole", "√©l√®ve", "professeur", "tableau", "cahier",
    "travail", "magasin", "ville", "village", "porte", "t√©l√©phone", "ordinateur", "arbre", "fleur", "soleil",
    "lune", "√©toile", "ciel", "pluie", "neige", "vent", "chaleur", "froid", "printemps", "√©t√©",
    "automne", "hiver", "courir", "marcher", "nager", "voler", "s‚Äôasseoir", "se tenir", "lire", "√©crire",
    "parler", "√©couter", "voir", "penser", "aimer", "d√©tester", "manger", "boire", "dormir", "se lever",
    "bon", "mauvais", "grand", "petit", "nouveau", "vieux", "chaud", "froid", "rapide", "lent",
    "intelligent", "stupide", "beau", "laid", "joyeux", "triste", "facile", "difficile", "propre", "sale",
    "rouge", "jaune", "vert", "bleu", "blanc", "noir", "gris", "marron", "orange", "rose",
    "un", "deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", "dix",
    "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche", "jour", "nuit", "matin",
    "soir", "aujourd‚Äôhui", "demain", "hier", "temps", "ann√©e", "mois", "semaine", "heure", "minute",
    "seconde", "route", "rue", "place", "mer", "rivi√®re", "montagne", "for√™t", "parc", "plage"
};

vector<string> english = {
    "apple", "dog", "cat", "house", "car", "window", "chair", "table", "pen", "book",
    "milk", "water", "bread", "meat", "fish", "tea", "coffee", "sugar", "salt", "butter",
    "mom", "dad", "brother", "sister", "child", "school", "student", "teacher", "board", "notebook",
    "work", "store", "city", "village", "door", "phone", "laptop", "tree", "flower", "sun",
    "moon", "star", "sky", "rain", "snow", "wind", "warmth", "cold", "spring", "summer",
    "autumn", "winter", "run", "walk", "swim", "fly", "sit", "stand", "read", "write",
    "speak", "listen", "see", "think", "love", "hate", "eat", "drink", "sleep", "wake up",
    "good", "bad", "big", "small", "new", "old", "hot", "cold", "fast", "slow",
    "smart", "stupid", "beautiful", "ugly", "happy", "sad", "easy", "hard", "clean", "dirty",
    "red", "yellow", "green", "blue", "white", "black", "gray", "brown", "orange", "pink",
    "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten",
    "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "day", "night", "morning",
    "evening", "today", "tomorrow", "yesterday", "time", "year", "month", "week", "hour", "minute",
    "second", "road", "street", "square", "sea", "river", "mountain", "forest", "park", "beach"
};


int getRandomIndex(int size) {
    static random_device rd;
    static mt19937 gen(rd());
    uniform_int_distribution<> dis(0, size - 1);
    return dis(gen);
}

string strip(const string& s) {
    auto start = find_if_not(s.begin(), s.end(), ::isspace);
    auto end = find_if_not(s.rbegin(), s.rend(), ::isspace).base();
    return (start < end) ? string(start, end) : "";
}

string toLower(const string& s) {
    string result = s;
    transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}

string convertString(string& str) {
	return strip(toLower(str));
}

class MistakeManager {
public:
    map<string, int> mistakes;

    void addMistake(const string& word) {
        mistakes[word]++;
    }

    void showMistakes() {
        cout << "\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n";
        for (const auto& [word, count] : mistakes) {
            cout << word << " ‚Äî " << count << " —Ä–∞–∑(—ñ–≤)\n";
        }
    }
};

class WordTrainer {
    vector<string>& from;
    vector<string>& to;
    MistakeManager& mistakeManager;

public:
    WordTrainer(vector<string>& fromLang, vector<string>& toLang, MistakeManager& mm)
        : from(fromLang), to(toLang), mistakeManager(mm) {
    }

    void startTraining(int rounds = 5) {
        for (int i = 0; i < rounds; ++i) {
            int idx = getRandomIndex(from.size());
            string answer;
            cout << "–ü–µ—Ä–µ–∫–ª–∞–¥—ñ—Ç—å —Å–ª–æ–≤–æ: " << from[idx] << " ‚Üí ";
            getline(cin, answer);
            if (convertString(answer) == to[idx]) {
                cout << "‚úî  –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n";
            }
            else {
                cout << "‚úñ  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: " << to[idx] << "\n";
                mistakeManager.addMistake(from[idx]);
            }
        }
    }
};

class GameEngine {
    MistakeManager mistakeManager;
	WordTrainer trainer;

public:
	GameEngine(WordTrainer& word_trainer) : trainer(word_trainer) {
	}
    void run() {
        trainer.startTraining();
        mistakeManager.showMistakes();
    }
};

int main() {
    system("chcp 65001 > nul");
    MistakeManager mistakeManager;

    unordered_map<string, unique_ptr<WordTrainer>> trainers;

    trainers["ukrainian-french"] = make_unique<WordTrainer>(ukrainian, french, mistakeManager);
    trainers["french-ukrainian"] = make_unique<WordTrainer>(french, ukrainian, mistakeManager);
    trainers["ukrainian-english"] = make_unique<WordTrainer>(ukrainian, english, mistakeManager);
    trainers["english-ukrainian"] = make_unique<WordTrainer>(english, ukrainian, mistakeManager);
    trainers["french-english"] = make_unique<WordTrainer>(french, english, mistakeManager);
    trainers["english-french"] = make_unique<WordTrainer>(english, french, mistakeManager);

    GameEngine game(*trainers["ukrainian-english"]);


    thread gameThread(&GameEngine::run, &game);
    gameThread.join();
    return 0;
}

